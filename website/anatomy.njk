{% set page = 'anatomy.html' %}
{% set page = 'Anatomy | RingMenu' %}
{% set description = 'Description of the various parts used to build a RingMenu.' %}
{% extends '_base.njk' %}

{% block page %}
  {{ heading('h1', 'The anatomy of a ring menu') }}
  
  {{ heading('h2', 'Circles') }}

  <p>Menus are assembled from the inside out. Let's take a look at the simplest menu possible; a menu that only contains one <em>circle</em>.</p>

  {{ example('
    const menu = RM.menu([
      RM.circle(50, "Circle", {fill: "red"}),
    ]);
    const svg = RM.build(menu);
  ') }}

  <p>Circles are optional and can only be found in the very center of a menu.</p>

  {{ heading('h2', 'Rings and sectors') }}

  <p>Menus are mostly made out of <em>rings</em>. A <em>ring</em> is a collection of <em>sectors</em> which are all on the same distance from the center of the menu. A <em>sector</em> is an SVG <code>&lt;path&gt;</code> element. Sectors are rendered clockwise in the order they're provided to the ring.</p>

  {{ example('
    const menu = RM.menu([
      RM.circle(50, "Circle", {fill: "red"}),
      RM.ring(100, [
        RM.sector("Sector 1", {fill: "lightblue"}),
        RM.sector("Sector 2", {fill: "lightgreen"}),
      ]),
    ]);
    const svg = RM.build(menu);
  ')}}

  <p>Here we specified a ring with a width of 100 pixels that consists of two sectors. Notice how we didn't need to specify the size of our sectors; they split the ring into equal parts by themselves. What if we wanted our ring to have six sectors instead? Also, we've already mentioned that circles are optional, so how about a menu without a circle? Let's give it a try:</p>

  {{ example('
    const menu = RM.menu([
      RM.ring(150, [
        RM.sector("Sector 1", {fill: "lightblue"}),
        RM.sector("Sector 2", {fill: "lightgreen"}),
        RM.sector("Sector 3", {fill: "lightblue"}),
        RM.sector("Sector 4", {fill: "lightgreen"}),
        RM.sector("Sector 5", {fill: "lightblue"}),
        RM.sector("Sector 6", {fill: "lightgreen"}),
      ]),
    ]);
    const svg = RM.build(menu);
  ')}}

  <p>As you might have expected, the six sectors will divide the ring equally. Also, because menus are always built from the inside out and we didn't use a circle in this menu, it means that the ring will start from the very center of the menu, resulting in a menu that looks kind of like a pie chart.</p>

  <p>The great thing about rings is that a menu can have as many of them as you want, and they are all independent one from another. Let's say we wanted a menu that has one ring with three sectors inside, with another ring with two sectors around the first ring. We can construct that menu like so:</p>

  {{ example('
    const menu = RM.menu([
      RM.ring(100, [
        RM.sector("Inner 1", {fill: "lightblue"}),
        RM.sector("Inner 2", {fill: "lightgreen"}),
        RM.sector("Inner 3", {fill: "lightsalmon"}),
      ]),
      RM.ring(100, [
        RM.sector("Outer 1", {fill: "lightpink"}),
        RM.sector("Outer 2", {fill: "yellowgreen"}),
      ]),
    ]);
    const svg = RM.build(menu);
  ')}}

  {{ heading('h2', 'Gaps') }}

  <p>What if we wanted to include some space between the two rings in the previous example? We can do that by using a <em>gap</em>. A <em>gap</em> is simply a ring of empty space. A menu can have an arbitrary amount of gaps.</p>

  {{ example('
      const menu = RM.menu([
        RM.gap(40),
        RM.ring(100, [
          RM.sector("Inner 1", {fill: "lightblue"}),
          RM.sector("Inner 2", {fill: "lightgreen"}),
          RM.sector("Inner 3", {fill: "lightsalmon"}),
        ]),
        RM.gap(50),
        RM.ring(100, [
          RM.sector("Outer 1", {fill: "lightpink"}),
          RM.sector("Outer 2", {fill: "yellowgreen"}),
        ]),
      ]);
      const svg = RM.build(menu);
    ')}}

  <p>Here we've added a 50 pixel wide gap between the two rings. Notice how we've also added a 40 pixel wide gap before the first ring. If you don't need a <em>circle</em> in the center of your menu, but you also don't want your first ring to start from the center, then use a <em>gap</em>.</p>
{% endblock %}